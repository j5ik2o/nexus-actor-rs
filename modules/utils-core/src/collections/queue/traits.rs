use super::{queue_error::QueueError, queue_size::QueueSize, QueueStorage};
use crate::sync::Shared;

/// キューの基本操作を定義する共通トレイト。
///
/// このトレイトは、キューのサイズ情報を取得するための基本的な機能を提供します。
/// [`QueueWriter`]、[`QueueReader`]、[`QueueRw`] トレイトの基底トレイトとして機能します。
///
/// # 型パラメータ
///
/// * `E` - キューに格納される要素の型
pub trait QueueBase<E> {
  /// キューの現在のサイズを返す。
  ///
  /// # Returns
  ///
  /// キューに現在格納されている要素数を [`QueueSize`] として返します。
  fn len(&self) -> QueueSize;

  /// キューの容量を返す。
  ///
  /// # Returns
  ///
  /// キューが保持できる最大要素数を [`QueueSize`] として返します。
  /// 無制限キューの場合は `QueueSize::Limitless` を返します。
  fn capacity(&self) -> QueueSize;

  /// キューが空かどうかを判定する。
  ///
  /// # Returns
  ///
  /// キューが空の場合は `true`、要素が存在する場合は `false` を返します。
  fn is_empty(&self) -> bool {
    self.len() == QueueSize::Limited(0)
  }
}

/// キューへの書き込み操作を提供するトレイト。
///
/// このトレイトは、可変参照を使用してキューに要素を追加する機能を提供します。
/// シングルスレッド環境や、既に適切なロックが取得されている状況で使用されます。
///
/// # 型パラメータ
///
/// * `E` - キューに格納される要素の型
pub trait QueueWriter<E>: QueueBase<E> {
  /// 要素をキューに追加する（可変参照版）。
  ///
  /// キューに要素を追加しようと試みます。キューが満杯の場合やクローズされている場合は
  /// エラーを返します。
  ///
  /// # Arguments
  ///
  /// * `element` - キューに追加する要素
  ///
  /// # Returns
  ///
  /// * `Ok(())` - 要素が正常に追加された場合
  /// * `Err(QueueError)` - 追加に失敗した場合（満杯、クローズ済みなど）
  fn offer_mut(&mut self, element: E) -> Result<(), QueueError<E>>;
}

/// キューからの読み取り操作を提供するトレイト。
///
/// このトレイトは、可変参照を使用してキューから要素を取り出す機能を提供します。
/// シングルスレッド環境や、既に適切なロックが取得されている状況で使用されます。
///
/// # 型パラメータ
///
/// * `E` - キューに格納される要素の型
pub trait QueueReader<E>: QueueBase<E> {
  /// キューから要素を取り出す（可変参照版）。
  ///
  /// キューの先頭要素を取り出して返します。キューが空の場合は `None` を返します。
  ///
  /// # Returns
  ///
  /// * `Ok(Some(element))` - 要素が正常に取り出された場合
  /// * `Ok(None)` - キューが空の場合
  /// * `Err(QueueError)` - 読み取りに失敗した場合
  fn poll_mut(&mut self) -> Result<Option<E>, QueueError<E>>;

  /// キューのクリーンアップ処理を実行する（可変参照版）。
  ///
  /// キューの内部状態を整理し、不要なリソースを解放します。
  /// 実装によっては、メモリの最適化やバッファの再編成などを行います。
  fn clean_up_mut(&mut self);
}

/// キューの読み書き操作を提供するトレイト。
///
/// このトレイトは、共有参照を使用してキューの読み書き操作を行う機能を提供します。
/// マルチスレッド環境で安全に使用できるよう、内部で適切な同期機構を使用します。
///
/// # 型パラメータ
///
/// * `E` - キューに格納される要素の型
pub trait QueueRw<E>: QueueBase<E> {
  /// 要素をキューに追加する（共有参照版）。
  ///
  /// キューに要素を追加しようと試みます。内部で適切なロックを取得して
  /// スレッドセーフな書き込みを保証します。
  ///
  /// # Arguments
  ///
  /// * `element` - キューに追加する要素
  ///
  /// # Returns
  ///
  /// * `Ok(())` - 要素が正常に追加された場合
  /// * `Err(QueueError)` - 追加に失敗した場合（満杯、クローズ済みなど）
  fn offer(&self, element: E) -> Result<(), QueueError<E>>;

  /// キューから要素を取り出す（共有参照版）。
  ///
  /// キューの先頭要素を取り出して返します。内部で適切なロックを取得して
  /// スレッドセーフな読み取りを保証します。
  ///
  /// # Returns
  ///
  /// * `Ok(Some(element))` - 要素が正常に取り出された場合
  /// * `Ok(None)` - キューが空の場合
  /// * `Err(QueueError)` - 読み取りに失敗した場合
  fn poll(&self) -> Result<Option<E>, QueueError<E>>;

  /// キューのクリーンアップ処理を実行する（共有参照版）。
  ///
  /// キューの内部状態を整理し、不要なリソースを解放します。
  /// 内部で適切なロックを取得してスレッドセーフなクリーンアップを保証します。
  fn clean_up(&self);
}

/// キューハンドルの共通インターフェース。
///
/// このトレイトは、キューの実装を抽象化し、異なるストレージバックエンドを
/// 統一的に扱うためのハンドルを定義します。
/// [`Shared`] トレイトと [`Clone`] を継承し、複数のスレッドから安全に
/// キューにアクセスできることを保証します。
///
/// # 型パラメータ
///
/// * `E` - キューに格納される要素の型
///
/// # 関連型
///
/// * `Storage` - 内部で使用されるストレージの型。[`QueueStorage`] を実装している必要があります。
pub trait QueueHandle<E>: Shared<Self::Storage> + Clone {
  /// ストレージバックエンドの型。
  ///
  /// このキューが使用する内部ストレージの型を定義します。
  /// [`QueueStorage`] トレイトを実装している必要があります。
  type Storage: QueueStorage<E> + ?Sized;

  /// 内部ストレージへの参照を取得する。
  ///
  /// # Returns
  ///
  /// このハンドルが管理するストレージへの参照を返します。
  fn storage(&self) -> &Self::Storage;
}
